(function () {
    "use strict";

    var IMAGES_PATH = '/assets/img/',
        _themes = {
            'Herschel': {
                file: 'herschel.css',
                image: 'background-herschel.png',
                copyright: 'Background image generated by <a href="http://rzurad.github.io/TEXTp" target="_new">TEXTp</a> using an image courtesy of the ESA/NASA/Herschel/PACS/MESS Key Programme Supernova Remnant Team/Allison Loll and Jeff Hester (Arizona State University)'

            },
            'Carina': {
                file: 'carina.css',
                image: 'background-carina.png',
                copyright: 'Background image generated by <a href="http://rzurad.github.io/TEXTp" target="_new">TEXTp</a> using an image courtesy of NASA/ESA/M. Livio/The Hubble Heritage Team/Hubble 20th Anniversary Team (STScI)'
            },
            'Helios': {
                file: 'helios.css',
                image: 'background-helios.png',
                copyright: 'Background image generated by <a href="http://rzurad.github.io/TEXTp" target="_new">TEXTp</a> using an image courtesy of NASA/SDO'
            }
        };

    function loadTheme(key) {
        var $head = $('head'),
            $body = $('body'),
            $oldTheme = $head.find('link[data-theme]'),
            $oldBackground = $('.background-container'),
            $newBackground = $('<div class="background-container"><div class="background"></div></div>');

        // if the key is Random (or the key is invalid because you
        // messed with your localStorage) then pick a random theme
        if (key === 'Random') {
            key = (function (a) {
                return a[~~(Math.random() * a.length)];
            }(Object.keys(_themes)));

            // if 'Random' came back with the same theme we are currently displaying,
            // then send it back and try again. We can't be having the same theme
            // as before... that'd be some bullshit, right there...
            if (key === $oldTheme.attr('data-theme')) {
                loadTheme('Random');

                return;
            }
        }

        var theme = _themes[key],
            image = new Image(),

            // after the image is loaded, fade it in
            onLoad = function () {
                var $bg = $newBackground.find('.background');

                $bg.css('background-image', 'url("' + image.src + '")');
                $newBackground.css('opacity', '1');
            };

        // load the image
        image.addEventListener('load', onLoad);
        image.src = IMAGES_PATH + theme.image;

        // fade out old image
        $oldBackground.css('opacity', '0');
        $('.image-credits').html(theme.copyright);

        // have the old background element remove itself approx. 250mx after
        // the fade out transition completes.
        // Yes, It's a setTimeout. No, I don't trust the `onTransitionEnd` event
        // to reliably fire every time
        setTimeout(function () {
            $oldBackground.remove();
        }, 1250);

        $body.prepend($newBackground);
        $head.append('<link rel="stylesheet" data-theme="' + key  + '" href="./css/' + theme.file + '">');
        $oldTheme.remove();

        // in case the image is being loaded from cache and the load event
        // does not fire.
        if (image.complete) {
            onLoad();
        }
    }

    // determine the theme to display:
    //    Use the theme given by a querystring, if it's valid.
    //    Otherwise, use the theme they last selected (if any),
    //    Otherwise, use Herschel
    var qs = window.location.search.match(/theme=([a-zA-Z]+)/),
        ls = localStorage.getItem('theme'),
        $list = $('#theme-list'),
        initialTheme;

    if (qs) {
        qs = qs.pop();

        if (!(qs in _themes) && qs !== 'Random') {
            qs = null;
        }
    }

    initialTheme = qs || ls in _themes && ls || 'Random';

    loadTheme(initialTheme);

    // draw the theme list
    Object.keys(_themes).concat(['Random']).forEach(function (key) {
        var active = key === initialTheme ? ' class="active"' : '';

        $list.append(
            '<a href="#" data-theme="' + key + '"' + active + '>' + key + '</a> '
        );
    });

    // bind theme selection click
    $list.on('click', 'a', function (e) {
        e.preventDefault();

        var $target = $(e.target),
            key = $target.attr('data-theme');

        if ($target.is('.active')) {
            return;
        }

        // swap active class
        $target.siblings('.active').removeClass('active');
        $target.addClass('active');

        window.localStorage.setItem('theme', key);
        loadTheme(key);
    });
}());
